{"ast":null,"code":"import _classCallCheck from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/yash/WebDev/Quiz-Website/player-console/src/components/QuizConsole.jsx\";\nimport React, { Component } from \"react\";\nimport CircularProgressbar from \"react-circular-progressbar\";\nimport * as firebase from \"firebase\";\nimport BrandHeader from \"./brandHeader\";\nimport wait from '../image/quiz.png';\nvar needDominantBaselineFix = true;\n\nvar QuizConsole =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuizConsole, _Component);\n\n  function QuizConsole(props) {\n    var _this;\n\n    _classCallCheck(this, QuizConsole);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuizConsole).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.liveQuestionSetter(); //Detecting change in liveQuestion variable in real time database\n\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.props.firebaseRef.on(\"value\", function (snapshot) {\n        if (snapshot.exists()) {\n          _this.setState({\n            liveQuestion: snapshot.val().liveQuestion\n          });\n\n          _this.currentQuestion(); //This is for enabling quiz page when new question arrives\n\n\n          var _firebaseUserInfo = firebase.database().ref(\"players/\".concat(_this.props.teamName));\n\n          _firebaseUserInfo.once(\"value\", function (snapshot) {\n            _this.setState({\n              counter: snapshot.val().counter\n            });\n          });\n\n          if (snapshot.val().globalCounter === 1 && _this.state.counter === 2) {\n            _this.setState({\n              afterAns: false\n            });\n\n            var firebaseResetCounter = _this.props.database.ref(\"players/\".concat(_this.props.teamName));\n\n            firebaseResetCounter.child(\"counter\").set(0);\n          }\n\n          if (_this.state.counter === 0) {\n            var time = 15;\n            var perc = 0;\n            var mytimer = setInterval(function () {\n              time = time - 1;\n              perc += 6.66666666666666666;\n\n              if (perc > 99) {\n                killTimer();\n\n                _this.setState({\n                  counter: 2\n                });\n              }\n\n              if (time < 10) time = '0' + time;\n\n              _this.setState({\n                timer: time,\n                percentage: perc\n              });\n            }, 1000);\n\n            var killTimer = function killTimer() {\n              clearInterval(mytimer);\n            };\n          }\n\n          _this.setState({\n            loading: false\n          });\n        }\n      });\n\n      var firebaseUserInfo = _this.props.database.ref(\"players/\".concat(_this.props.teamName));\n\n      firebaseUserInfo.once('value', function (snapshot) {\n        var userCounterCheck = snapshot.val().counter;\n\n        if (userCounterCheck === 2) {\n          _this.setState({\n            afterAns: true,\n            counter: 2\n          });\n\n          console.log(_this.state.counter);\n        }\n      });\n    };\n\n    _this.state = {\n      percentage: 0,\n      timer: \"15\",\n      liveQuestion: 0,\n      question: \"\",\n      correctAnswer: \"\",\n      optiona: \"\",\n      optionb: \"\",\n      optionc: \"\",\n      optiond: \"\",\n      answer: \"\",\n      counter: 1,\n      score: 0,\n      loading: false,\n      killtime: false,\n      afterAns: 'false'\n    };\n    return _this;\n  }\n\n  _createClass(QuizConsole, [{\n    key: \"optionUpdate\",\n    //function to increase option selected count\n    value: function optionUpdate(liveQues, option) {\n      var firebaseQuestionFind2 = this.props.database.ref(\"question/q\".concat(liveQues));\n      var optionACounter;\n      var optionBCounter;\n      var optionCCounter;\n      var optionDCounter;\n      firebaseQuestionFind2.once('value', function (snapshot) {\n        optionACounter = snapshot.val().optionACounter;\n        optionBCounter = snapshot.val().optionBCounter;\n        optionCCounter = snapshot.val().optionCCounter;\n        optionDCounter = snapshot.val().optionDCounter;\n      });\n\n      if (option === 'a') {\n        optionACounter = optionACounter + 1;\n        firebaseQuestionFind2.child('optionACounter').set(optionACounter);\n      }\n\n      if (option === 'b') {\n        optionBCounter = optionBCounter + 1;\n        firebaseQuestionFind2.child('optionBCounter').set(optionBCounter);\n      }\n\n      if (option === 'c') {\n        optionCCounter = optionCCounter + 1;\n        firebaseQuestionFind2.child('optionCCounter').set(optionCCounter);\n      }\n\n      if (option === 'd') {\n        optionDCounter = optionDCounter + 1;\n        firebaseQuestionFind2.child('optionDCounter').set(optionDCounter);\n      }\n    }\n  }, {\n    key: \"hitTimer\",\n    value: function hitTimer(swi) {}\n  }, {\n    key: \"currentQuestion\",\n    //function to find the question string for the live question\n    value: function currentQuestion() {\n      var firebaseQuestionFind = this.props.database.ref(\"question/q\".concat(this.state.liveQuestion));\n      var questionToBeDisplayed;\n      var answerToBeDisplayed;\n      var optionA, optionB, optionC, optionD;\n      firebaseQuestionFind.once('value', function (snapshot) {\n        questionToBeDisplayed = snapshot.val().q;\n        answerToBeDisplayed = snapshot.val().a;\n        optionA = snapshot.val().optionA;\n        optionB = snapshot.val().optionB;\n        optionC = snapshot.val().optionC;\n        optionD = snapshot.val().optionD;\n      });\n      this.setState({\n        question: questionToBeDisplayed,\n        correctAnswer: answerToBeDisplayed,\n        optiona: optionA,\n        optionb: optionB,\n        optionc: optionC,\n        optiond: optionD\n      });\n    }\n  }, {\n    key: \"check\",\n    value: function check(event) {\n      var _this2 = this;\n\n      var option = event.target.id;\n      this.setState({\n        answer: option\n      }); //correcting the user's option\n\n      this.props.firebaseRef.once('value', function (snapshot) {\n        var actualAns = _this2.state.correctAnswer;\n\n        _this2.setState({\n          liveQuestion: snapshot.val().liveQuestion\n        });\n\n        var score;\n        var userCounterCheck;\n\n        var firebaseUserInfo = _this2.props.database.ref(\"players/\".concat(_this2.props.teamName));\n\n        firebaseUserInfo.once('value', function (snapshot) {\n          score = snapshot.val().score;\n          userCounterCheck = snapshot.val().counter;\n        });\n\n        if (userCounterCheck !== 2) {\n          _this2.props.firebaseRef.once('value', function (snapshot) {\n            _this2.setState({\n              liveQuestion: snapshot.val().liveQuestion\n            });\n\n            _this2.optionUpdate(_this2.state.liveQuestion, option);\n          });\n        }\n\n        if (actualAns === option && userCounterCheck !== 2) {\n          var startTimeStamp = snapshot.val().timeStamp;\n          var currentTime = new Date().getTime();\n          var timeElapsed = Math.round((currentTime - startTimeStamp) / 1000);\n          var newScore = score + (50 - timeElapsed);\n          var firebaseChangeScore = firebase.database().ref(\"players/\".concat(_this2.props.teamName));\n          firebaseChangeScore.child(\"score\").set(newScore);\n        }\n\n        var firebaseChangeCounter2 = firebase.database().ref(\"players/\".concat(_this2.props.teamName));\n        firebaseChangeCounter2.child('counter').set(2);\n      });\n    } //Onload function to display current live question\n\n  }, {\n    key: \"liveQuestionSetter\",\n    value: function liveQuestionSetter() {\n      var _this3 = this;\n\n      this.props.firebaseRef.once(\"value\", function (snapshot) {\n        var liveQues = snapshot.val().liveQuestion;\n\n        _this3.setState({\n          liveQuestion: liveQues\n        });\n\n        _this3.currentQuestion();\n      });\n    }\n  }, {\n    key: \"renderTimer\",\n    value: function renderTimer() {\n      if (this.state.counter !== 2) return React.createElement(CircularProgressbar, {\n        className: \"timerCircle\",\n        percentage: this.state.percentage,\n        text: React.createElement(\"tspan\", {\n          dx: needDominantBaselineFix ? -25 : 0,\n          dy: needDominantBaselineFix ? +6 : 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, \"00:\", this.state.timer),\n        background: \"true\",\n        backgroundPadding: 0,\n        strokeWidth: 5,\n        styles: {\n          // Customize the root svg element\n          root: {},\n          // Customize the path, i.e. the \"completed progress\"\n          path: {\n            // Path color\n            stroke: \"rgba(250, 0, 250, \".concat(100 / 100, \")\"),\n            // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n            strokeLinecap: \"butt\",\n            // Customize transition animation\n            transition: \"stroke-dashoffset 0.5s ease 0s\"\n          },\n          // Customize the circle behind the path, i.e. the \"total progress\"\n          trail: {\n            // Trail color\n            stroke: \"#d6d6d6\"\n          },\n          // Customize the text\n          text: {\n            // Text color\n            fill: \"#34c\",\n            // Text size\n            fontSize: \"20px\"\n          },\n          // Customize background - only used when the `background` prop is true\n          background: {\n            fill: \"white\"\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      if (this.state.counter === 2) return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: wait,\n        alt: \"namilehai\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"Question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, this.state.question), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"options\",\n        className: \"Options text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row container optionGrp justify-content-center \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"a\",\n        className: \"tag col-lg-5 text-center\",\n        onClick: this.check.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, this.state.optiona), React.createElement(\"div\", {\n        id: \"b\",\n        className: \"tag col-lg-5 text-center\",\n        onClick: this.check.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, this.state.optionb)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row container optionGrp justify-content-center\",\n        id: \"options\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"c\",\n        className: \"tag col-lg-5\",\n        onClick: this.check.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, this.state.optionc), React.createElement(\"div\", {\n        id: \"d\",\n        className: \"tag col-lg-5\",\n        onClick: this.check.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, this.state.optiond))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(BrandHeader, {\n        teamName: this.props.teamName,\n        participantName: this.props.participantName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"QuestionPage container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-centre justify-content-center row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"questionNumber tag\",\n        style: {\n          justifyContent: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, \"Quesetion \", this.state.liveQuestion, \" of 10\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }), this.renderQuestion(), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"timer col-sm-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, this.renderTimer()), React.createElement(\"div\", {\n        className: \"continue tag col-sm-2 text-center\",\n        style: {\n          borderRadius: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"Continue\"))));\n    }\n  }]);\n\n  return QuizConsole;\n}(Component);\n\nexport default QuizConsole;","map":{"version":3,"sources":["/home/yash/WebDev/Quiz-Website/player-console/src/components/QuizConsole.jsx"],"names":["React","Component","CircularProgressbar","firebase","BrandHeader","wait","needDominantBaselineFix","QuizConsole","props","componentDidMount","liveQuestionSetter","setState","loading","firebaseRef","on","snapshot","exists","liveQuestion","val","currentQuestion","firebaseUserInfo","database","ref","teamName","once","counter","globalCounter","state","afterAns","firebaseResetCounter","child","set","time","perc","mytimer","setInterval","killTimer","timer","percentage","clearInterval","userCounterCheck","console","log","question","correctAnswer","optiona","optionb","optionc","optiond","answer","score","killtime","liveQues","option","firebaseQuestionFind2","optionACounter","optionBCounter","optionCCounter","optionDCounter","swi","firebaseQuestionFind","questionToBeDisplayed","answerToBeDisplayed","optionA","optionB","optionC","optionD","q","a","event","target","id","actualAns","optionUpdate","startTimeStamp","timeStamp","currentTime","Date","getTime","timeElapsed","Math","round","newScore","firebaseChangeScore","firebaseChangeCounter2","root","path","stroke","strokeLinecap","transition","trail","text","fill","fontSize","background","check","bind","participantName","justifyContent","renderQuestion","renderTimer","borderRadius"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CircularProgressbar from \"react-circular-progressbar\";\nimport * as firebase from \"firebase\";\nimport BrandHeader from \"./brandHeader\";\nimport wait from '../image/quiz.png'\n\nconst needDominantBaselineFix = true;\n\nclass QuizConsole extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      percentage: 0,\n      timer: \"15\",\n      liveQuestion: 0,\n      question: \"\",\n      correctAnswer: \"\",\n      optiona: \"\",\n      optionb: \"\",\n      optionc: \"\",\n      optiond: \"\",\n      answer: \"\",\n      counter: 1,\n      score: 0,\n      loading: false,\n      killtime: false,\n      afterAns : 'false'\n    };\n  }\n\n  componentDidMount = () => {\n    this.liveQuestionSetter();\n\n    \n    \n    //Detecting change in liveQuestion variable in real time database\n    this.setState({loading: true})\n    this.props.firebaseRef.on(\"value\", (snapshot) =>{\n     \n      if (snapshot.exists()) {\n\n        this.setState({liveQuestion: snapshot.val().liveQuestion})\n      \n\n        this.currentQuestion();\n\n        //This is for enabling quiz page when new question arrives\n        \n        let firebaseUserInfo = firebase.database().ref(`players/${this.props.teamName}`);\n        firebaseUserInfo.once(\"value\", (snapshot)=> {\n         this.setState({ counter : snapshot.val().counter})\n        });\n\n        \n\n        if (snapshot.val().globalCounter === 1 && this.state.counter === 2) {\n         this.setState({afterAns: false})\n          let firebaseResetCounter = this.props.database.ref(`players/${this.props.teamName}`);\n          firebaseResetCounter.child(\"counter\").set(0);\n        }\n\n        if(this.state.counter===0)\n        {\n          var time=15;\n          var perc=0;\n  \n  \n  var mytimer = setInterval(()=>{\n    time=time-1;\n    perc+=6.66666666666666666;\n    if(perc>99){\n    killTimer();\n    this.setState({counter: 2})\n    }\n    if(time<10)\n    time = '0'+time;\n    this.setState({timer: time,\n      percentage: perc})\n  }, 1000);\n\n\nvar killTimer=()=>{\n  clearInterval(mytimer)\n}\n        }\n\n        this.setState({loading: false,})\n          \n      }\n    });\n    let firebaseUserInfo = this.props.database.ref(`players/${this.props.teamName}`);\n          firebaseUserInfo.once('value', (snapshot)=> {\n              let userCounterCheck = snapshot.val().counter;\n              if(userCounterCheck===2){\n              this.setState({afterAns: true,\n              counter: 2})\n              console.log(this.state.counter)}\n          })\n  };\n   \n\n\n//function to increase option selected count\noptionUpdate(liveQues, option) {\n  let firebaseQuestionFind2 = this.props.database.ref(`question/q${liveQues}`);\n\n  let optionACounter;\n  let optionBCounter;\n  let optionCCounter;\n  let optionDCounter;\n  firebaseQuestionFind2.once('value', (snapshot)=> {\n      optionACounter = snapshot.val().optionACounter;\n      optionBCounter = snapshot.val().optionBCounter;\n      optionCCounter = snapshot.val().optionCCounter;\n      optionDCounter = snapshot.val().optionDCounter;\n  })\n\n  if (option === 'a') {\n      optionACounter = optionACounter + 1;\n      firebaseQuestionFind2.child('optionACounter').set(optionACounter);\n  }\n\n  if (option === 'b') {\n      optionBCounter = optionBCounter + 1;\n      firebaseQuestionFind2.child('optionBCounter').set(optionBCounter);\n  }\n\n  if (option === 'c') {\n      optionCCounter = optionCCounter + 1;\n      firebaseQuestionFind2.child('optionCCounter').set(optionCCounter);\n  }\n\n  if (option === 'd') {\n      optionDCounter = optionDCounter + 1;\n      firebaseQuestionFind2.child('optionDCounter').set(optionDCounter);\n  }\n}\n\n\n\n\nhitTimer(swi){\n  \n \n};\n\n//function to find the question string for the live question\n currentQuestion() {\n\n  let firebaseQuestionFind = this.props.database.ref(`question/q${this.state.liveQuestion}`);\n\n  let questionToBeDisplayed;\n  let answerToBeDisplayed;\n  let optionA,optionB,optionC,optionD;\n  firebaseQuestionFind.once('value', (snapshot) =>{\n      questionToBeDisplayed = snapshot.val().q;\n      answerToBeDisplayed = snapshot.val().a;\n      optionA = snapshot.val().optionA;\n      optionB = snapshot.val().optionB;\n      optionC = snapshot.val().optionC;\n      optionD = snapshot.val().optionD;\n      \n  });\n\n  this.setState({\n    question: questionToBeDisplayed,\n    correctAnswer: answerToBeDisplayed,\n    optiona: optionA,\n    optionb: optionB,\n    optionc: optionC,\n    optiond: optionD,\n\n  })\n}\n\n   check(event) {\n\n    let option=event.target.id;\n    this.setState({\n      answer: option,\n    })\n      //correcting the user's option\n      this.props.firebaseRef.once('value', (snapshot) =>{\n          let actualAns = this.state.correctAnswer;\n          this.setState({\n            liveQuestion: snapshot.val().liveQuestion\n          })\n          let score;\n          let userCounterCheck;\n          let firebaseUserInfo = this.props.database.ref(`players/${this.props.teamName}`);\n          firebaseUserInfo.once('value', (snapshot)=> {\n              score = snapshot.val().score;\n              userCounterCheck = snapshot.val().counter;\n          })\n  \n          if (userCounterCheck !== 2) {\n              this.props.firebaseRef.once('value', (snapshot)=> {\n                  this.setState({liveQuestion: snapshot.val().liveQuestion})\n                  this.optionUpdate(this.state.liveQuestion, option);\n              })\n\n              \n          }\n          \n  \n          if (actualAns === option && userCounterCheck !== 2) {\n              \n              let startTimeStamp = snapshot.val().timeStamp;\n              let currentTime = new Date().getTime();\n              let timeElapsed =  Math.round((currentTime-startTimeStamp)/1000);\n              let newScore = score + (50-timeElapsed);\n              let firebaseChangeScore = firebase.database().ref(`players/${this.props.teamName}`);\n              firebaseChangeScore.child(\"score\").set(newScore);\n          }\n  \n          \n          let firebaseChangeCounter2 = firebase.database().ref(`players/${this.props.teamName}`);\n          firebaseChangeCounter2.child('counter').set(2);\n      })\n  }\n\n  //Onload function to display current live question\n   liveQuestionSetter() {\n    this.props.firebaseRef.once(\"value\", (snapshot)=> {\n      let liveQues = snapshot.val().liveQuestion;\n      this.setState({ liveQuestion: liveQues});\n      this.currentQuestion();\n    });\n  }\n  renderTimer(){\n    if(this.state.counter!==2)\n    return(\n    <CircularProgressbar\n                className=\"timerCircle\"\n                percentage={this.state.percentage}\n                text={\n                  <tspan\n                    dx={needDominantBaselineFix ? -25 : 0}\n                    dy={needDominantBaselineFix ? +6 : 0}>\n                     00:{this.state.timer}\n                   </tspan>\n                }\n                background=\"true\"\n                backgroundPadding={0}\n                strokeWidth={5}\n                styles={{\n                  // Customize the root svg element\n                  root: {},\n                  // Customize the path, i.e. the \"completed progress\"\n                  path: {\n                    // Path color\n                    stroke: `rgba(250, 0, 250, ${100 / 100})`,\n                    // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n                    strokeLinecap: \"butt\",\n                    // Customize transition animation\n                    transition: \"stroke-dashoffset 0.5s ease 0s\"\n                  },\n                  // Customize the circle behind the path, i.e. the \"total progress\"\n                  trail: {\n                    // Trail color\n                    stroke: \"#d6d6d6\"\n                  },\n                  // Customize the text\n                  text: {\n                    // Text color\n                    fill: \"#34c\",\n                    // Text size\n                    fontSize: \"20px\"\n                  },\n                  // Customize background - only used when the `background` prop is true\n                  background: {\n                    fill: \"white\"\n                  }\n                }}\n              />)\n\n             return(<div></div>) \n  }\n  renderQuestion(){\n    if(this.state.counter===2)\n    return(\n      <div><img\n        src={wait} alt=\"namilehai\"/></div>\n    )\n    \n    return(\n      <div>\n      <p className=\"Question\">\n            {this.state.question}\n          </p>\n          <br />\n          <div id=\"options\" className=\"Options text-center\">\n          <div className=\"row container optionGrp justify-content-center \">\n          <div id=\"a\" className=\"tag col-lg-5 text-center\" onClick={this.check.bind(this)}>{this.state.optiona}</div>\n        <div id=\"b\" className=\"tag col-lg-5 text-center\" onClick={this.check.bind(this)}>{this.state.optionb}</div>\n          </div>\n<br/>\n        <div className=\"row container optionGrp justify-content-center\" id=\"options\">\n          <div id=\"c\" className=\"tag col-lg-5\" onClick={this.check.bind(this)}>{this.state.optionc}</div>\n        <div id=\"d\" className=\"tag col-lg-5\" onClick={this.check.bind(this)}>{this.state.optiond}</div>\n          </div>\n          \n          </div>\n          </div>\n    )\n  }\n\n \n\n  render() {\n    return (\n      <div>\n        <BrandHeader\n          teamName={this.props.teamName}\n          participantName={this.props.participantName}\n        />\n        <div className=\"QuestionPage container\">\n          <div className=\"text-centre justify-content-center row\">\n            <p\n              className=\"questionNumber tag\"\n              style={{ justifyContent: \"center\" }}\n            >\n              Quesetion {this.state.liveQuestion} of 10\n            </p>\n          </div>\n          <br />\n          {this.renderQuestion()}\n          <br />\n          <div className=\"row\">\n            <div className=\"col-sm-5\" />\n            <div className=\"timer col-sm-4\">\n              {this.renderTimer()}\n            </div>\n\n            <div\n              className=\"continue tag col-sm-2 text-center\"\n              style={{ borderRadius: 25 }}\n            >\n              Continue\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuizConsole;\n"]},"metadata":{},"sourceType":"module"}