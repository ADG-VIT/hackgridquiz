{"ast":null,"code":"import _defineProperty from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/yash/WebDev/Quiz-Website/player-console/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/yash/WebDev/Quiz-Website/player-console/src/components/QuizConsole.jsx\";\nimport React, { Component } from \"react\";\nimport CircularProgressbar from \"react-circular-progressbar\";\nimport * as firebase from \"firebase\";\nimport BrandHeader from \"./brandHeader\";\nvar needDominantBaselineFix = true;\n\nvar QuizConsole =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuizConsole, _Component);\n\n  function QuizConsole(props) {\n    var _this;\n\n    _classCallCheck(this, QuizConsole);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuizConsole).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.liveQuestionSetter(); //Detecting change in liveQuestion variable in real time database\n\n\n      _this.props.firebaseRef.on(\"value\", function (snapshot) {\n        if (snapshot.exists()) {\n          console.log(snapshot.val());\n          this.setState({\n            liveQuestion: snapshot.val().liveQuestion\n          });\n          this.currentQuestion(); //This is for enabling quiz page when new question arrives\n\n          var firebaseUserInfo = firebase.database().ref(\"players/\".concat(this.props.teamName));\n          firebaseUserInfo.once(\"value\", function (snapshot) {\n            this.setState({\n              counter: snapshot.val().counter\n            });\n          });\n\n          if (snapshot.val().globalCounter == 1 && this.state.counter == 2) {\n            this.setState({\n              afterAns: false\n            });\n            var firebaseResetCounter = this.props.database.ref(\"players/\".concat(this.props.teamName));\n            firebaseResetCounter.child(\"counter\").set(0);\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      percentage: 20,\n      time: \"00:30\",\n      liveQuestion: 0,\n      question: \"\",\n      correctAnswer: \"\",\n      optiona: \"\",\n      optionb: \"\",\n      optionc: \"\",\n      optiond: \"\",\n      answer: \"\",\n      answered: false,\n      counter: 1,\n      score: 0,\n      afterAns: 'false'\n    };\n    return _this;\n  }\n\n  _createClass(QuizConsole, [{\n    key: \"optionUpdate\",\n    //function to increase option selected count\n    value: function optionUpdate(liveQues, option) {\n      var firebaseQuestionFind2 = this.props.database.ref(\"question/q\".concat(liveQues));\n      var optionACounter;\n      var optionBCounter;\n      var optionCCounter;\n      var optionDCounter;\n      firebaseQuestionFind2.once('value', function (snapshot) {\n        optionACounter = snapshot.val().optionACounter;\n        optionBCounter = snapshot.val().optionBCounter;\n        optionCCounter = snapshot.val().optionCCounter;\n        optionDCounter = snapshot.val().optionDCounter;\n      });\n\n      if (option == 'a') {\n        optionACounter = optionACounter + 1;\n        firebaseQuestionFind2.child('optionACounter').set(optionACounter);\n      }\n\n      if (option == 'b') {\n        optionBCounter = optionBCounter + 1;\n        firebaseQuestionFind2.child('optionBCounter').set(optionBCounter);\n      }\n\n      if (option == 'c') {\n        optionCCounter = optionCCounter + 1;\n        firebaseQuestionFind2.child('optionCCounter').set(optionCCounter);\n      }\n\n      if (option == 'd') {\n        optionDCounter = optionDCounter + 1;\n        firebaseQuestionFind2.child('optionDCounter').set(optionDCounter);\n      }\n    } //function to find the question string for the live question\n\n  }, {\n    key: \"currentQuestion\",\n    value: function currentQuestion() {\n      var _this$setState;\n\n      var firebaseQuestionFind = this.props.database.ref(\"question/q\".concat(this.state.liveQuestion));\n      var questionToBeDisplayed;\n      var answerToBeDisplayed;\n      var optionA, optionB, optionC, optionD;\n      firebaseQuestionFind.once('value', function (snapshot) {\n        console.log(snapshot.val());\n        questionToBeDisplayed = snapshot.val().q;\n        answerToBeDisplayed = snapshot.val().a;\n        optionA = snapshot.val().optionA;\n        optionB = snapshot.val().optionB;\n        optionC = snapshot.val().optionC;\n        optionD = snapshot.val().optionD;\n      });\n      this.setState((_this$setState = {\n        question: questionToBeDisplayed,\n        correctAnswer: answerToBeDisplayed,\n        optiona: optionA\n      }, _defineProperty(_this$setState, \"optiona\", optionB), _defineProperty(_this$setState, \"optiona\", optionC), _defineProperty(_this$setState, \"optiona\", optionD), _this$setState));\n    }\n  }, {\n    key: \"check\",\n    value: function check(event) {\n      var option = event.target.id;\n      this.setState({\n        answer: option\n      }); //correcting the user's option\n\n      this.props.firebaseRef.once('value', function (snapshot) {\n        var actualAns = this.state.answer;\n        this.setState({\n          liveQuestion: snapshot.val().liveQuestion\n        });\n        var score;\n        var userCounterCheck;\n        var firebaseUserInfo = this.props.database.ref(\"players/\".concat(this.props.teamName));\n        firebaseUserInfo.once('value', function (snapshot) {\n          score = snapshot.val().score;\n          userCounterCheck = snapshot.val().counter;\n        });\n\n        if (userCounterCheck != 2) {\n          this.props.firebaseRef.once('value', function (snapshot) {\n            this.setState({\n              liveQuestion: snapshot.val().liveQuestion\n            });\n            optionUpdate(this.state.liveQuestion, option);\n          });\n        }\n\n        if (actualAns === option && userCounterCheck != 2) {\n          var startTimeStamp = snapshot.val().timeStamp;\n          var currentTime = new Date().getTime();\n          var timeElapsed = Math.round((currentTime - startTimeStamp) / 1000);\n          var newScore = score + (50 - timeElapsed);\n          var firebaseChangeScore = firebase.database().ref(\"players/\".concat(TN));\n          firebaseChangeScore.child(\"score\").set(newScore);\n        } //disabling buttons\n\n\n        document.getElementById(\"quiz\").style.display = \"none\";\n        document.getElementById(\"afterAns\").style.display = \"inherit\";\n        var firebaseChangeCounter2 = firebase.database().ref(\"players/\".concat(TN));\n        firebaseChangeCounter2.child('counter').set(2);\n      });\n    } //Onload function to display current live question\n\n  }, {\n    key: \"liveQuestionSetter\",\n    value: function liveQuestionSetter() {\n      this.props.firebaseRef.once(\"value\", function (snapshot) {\n        var liveQues = snapshot.val().liveQuestion;\n        this.setState({\n          liveQuestion: liveQues\n        });\n        currentQuestion();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(BrandHeader, {\n        teamName: this.props.teamName,\n        participantName: this.props.participantName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"QuestionPage container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-centre justify-content-center row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"questionNumber tag\",\n        style: {\n          justifyContent: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Quesetion \", this.state.liveQuestion, \" of 10\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"Question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, this.state.question), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"options\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"a\",\n        onclick: this.check.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"A\"), React.createElement(\"button\", {\n        id: \"b\",\n        onclick: this.check.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"B\"), React.createElement(\"button\", {\n        id: \"c\",\n        onclick: this.check.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"C\"), React.createElement(\"button\", {\n        id: \"d\",\n        onclick: this.check.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"D\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"timer col-sm-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(CircularProgressbar, {\n        className: \"timerCircle\",\n        percentage: this.state.percentage,\n        text: React.createElement(\"tspan\", {\n          dx: needDominantBaselineFix ? -25 : 0,\n          dy: needDominantBaselineFix ? +6 : 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, this.state.time),\n        background: \"true\",\n        backgroundPadding: 0,\n        strokeWidth: 5,\n        styles: {\n          // Customize the root svg element\n          root: {},\n          // Customize the path, i.e. the \"completed progress\"\n          path: {\n            // Path color\n            stroke: \"rgba(250, 0, 250, \".concat(this.state.percentage / 100, \")\"),\n            // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n            strokeLinecap: \"butt\",\n            // Customize transition animation\n            transition: \"stroke-dashoffset 0.5s ease 0s\"\n          },\n          // Customize the circle behind the path, i.e. the \"total progress\"\n          trail: {\n            // Trail color\n            stroke: \"#d6d6d6\"\n          },\n          // Customize the text\n          text: {\n            // Text color\n            fill: \"#34c\",\n            // Text size\n            fontSize: \"20px\"\n          },\n          // Customize background - only used when the `background` prop is true\n          background: {\n            fill: \"white\"\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"continue tag col-sm-2 text-center\",\n        style: {\n          borderRadius: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, \"Continue\"))));\n    }\n  }]);\n\n  return QuizConsole;\n}(Component);\n\nexport default QuizConsole;","map":{"version":3,"sources":["/home/yash/WebDev/Quiz-Website/player-console/src/components/QuizConsole.jsx"],"names":["React","Component","CircularProgressbar","firebase","BrandHeader","needDominantBaselineFix","QuizConsole","props","componentDidMount","liveQuestionSetter","firebaseRef","on","snapshot","exists","console","log","val","setState","liveQuestion","currentQuestion","firebaseUserInfo","database","ref","teamName","once","counter","globalCounter","state","afterAns","firebaseResetCounter","child","set","percentage","time","question","correctAnswer","optiona","optionb","optionc","optiond","answer","answered","score","liveQues","option","firebaseQuestionFind2","optionACounter","optionBCounter","optionCCounter","optionDCounter","firebaseQuestionFind","questionToBeDisplayed","answerToBeDisplayed","optionA","optionB","optionC","optionD","q","a","event","target","id","actualAns","userCounterCheck","optionUpdate","startTimeStamp","timeStamp","currentTime","Date","getTime","timeElapsed","Math","round","newScore","firebaseChangeScore","TN","document","getElementById","style","display","firebaseChangeCounter2","participantName","justifyContent","check","bind","root","path","stroke","strokeLinecap","transition","trail","text","fill","fontSize","background","borderRadius"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CircularProgressbar from \"react-circular-progressbar\";\nimport * as firebase from \"firebase\";\nimport BrandHeader from \"./brandHeader\";\n\nconst needDominantBaselineFix = true;\n\nclass QuizConsole extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      percentage: 20,\n      time: \"00:30\",\n      liveQuestion: 0,\n      question: \"\",\n      correctAnswer: \"\",\n      optiona: \"\",\n      optionb: \"\",\n      optionc: \"\",\n      optiond: \"\",\n      answer: \"\",\n      answered: false,\n      counter: 1,\n      score: 0,\n      afterAns : 'false'\n    };\n  }\n\n  componentDidMount = () => {\n    this.liveQuestionSetter();\n\n    //Detecting change in liveQuestion variable in real time database\n    this.props.firebaseRef.on(\"value\", function(snapshot) {\n      if (snapshot.exists()) {\n        console.log(snapshot.val());\n\n        this.setState({liveQuestion: snapshot.val().liveQuestion})\n\n        this.currentQuestion();\n\n        //This is for enabling quiz page when new question arrives\n        \n        let firebaseUserInfo = firebase.database().ref(`players/${this.props.teamName}`);\n        firebaseUserInfo.once(\"value\", function(snapshot) {\n         this.setState({ counter : snapshot.val().counter})\n        });\n\n        if (snapshot.val().globalCounter == 1 && this.state.counter == 2) {\n         this.setState({afterAns: false})\n          let firebaseResetCounter = this.props.database.ref(`players/${this.props.teamName}`);\n          firebaseResetCounter.child(\"counter\").set(0);\n        }\n      }\n    });\n  };\n   \n\n\n//function to increase option selected count\noptionUpdate(liveQues, option) {\n  let firebaseQuestionFind2 = this.props.database.ref(`question/q${liveQues}`);\n\n  let optionACounter;\n  let optionBCounter;\n  let optionCCounter;\n  let optionDCounter;\n  firebaseQuestionFind2.once('value', function(snapshot) {\n      optionACounter = snapshot.val().optionACounter;\n      optionBCounter = snapshot.val().optionBCounter;\n      optionCCounter = snapshot.val().optionCCounter;\n      optionDCounter = snapshot.val().optionDCounter;\n  })\n\n  if (option == 'a') {\n      optionACounter = optionACounter + 1;\n      firebaseQuestionFind2.child('optionACounter').set(optionACounter);\n  }\n\n  if (option == 'b') {\n      optionBCounter = optionBCounter + 1;\n      firebaseQuestionFind2.child('optionBCounter').set(optionBCounter);\n  }\n\n  if (option == 'c') {\n      optionCCounter = optionCCounter + 1;\n      firebaseQuestionFind2.child('optionCCounter').set(optionCCounter);\n  }\n\n  if (option == 'd') {\n      optionDCounter = optionDCounter + 1;\n      firebaseQuestionFind2.child('optionDCounter').set(optionDCounter);\n  }\n}\n\n\n\n\n\n//function to find the question string for the live question\n currentQuestion() {\n\n  let firebaseQuestionFind = this.props.database.ref(`question/q${this.state.liveQuestion}`);\n\n  let questionToBeDisplayed;\n  let answerToBeDisplayed;\n  let optionA,optionB,optionC,optionD;\n  firebaseQuestionFind.once('value', function(snapshot) {\n      console.log(snapshot.val());\n      questionToBeDisplayed = snapshot.val().q;\n      answerToBeDisplayed = snapshot.val().a;\n      optionA = snapshot.val().optionA;\n      optionB = snapshot.val().optionB;\n      optionC = snapshot.val().optionC;\n      optionD = snapshot.val().optionD;\n      \n  });\n\n  this.setState({\n    question: questionToBeDisplayed,\n    correctAnswer: answerToBeDisplayed,\n    optiona: optionA,\n    optiona: optionB,\n    optiona: optionC,\n    optiona: optionD,\n\n  })\n}\n\n   check(event) {\n\n    let option=event.target.id;\n    this.setState({\n      answer: option,\n    })\n      //correcting the user's option\n      this.props.firebaseRef.once('value', function(snapshot) {\n          let actualAns = this.state.answer;\n          this.setState({\n            liveQuestion: snapshot.val().liveQuestion\n          })\n          let score;\n          let userCounterCheck;\n          let firebaseUserInfo = this.props.database.ref(`players/${this.props.teamName}`);\n          firebaseUserInfo.once('value', function(snapshot) {\n              score = snapshot.val().score;\n              userCounterCheck = snapshot.val().counter;\n          })\n  \n          if (userCounterCheck != 2) {\n              this.props.firebaseRef.once('value', function(snapshot) {\n                  this.setState({liveQuestion: snapshot.val().liveQuestion})\n                  optionUpdate(this.state.liveQuestion, option);\n              })\n          }\n  \n          \n  \n          if (actualAns === option && userCounterCheck != 2) {\n              \n              let startTimeStamp = snapshot.val().timeStamp;\n              let currentTime = new Date().getTime();\n              let timeElapsed =  Math.round((currentTime-startTimeStamp)/1000);\n              let newScore = score + (50-timeElapsed);\n              let firebaseChangeScore = firebase.database().ref(`players/${TN}`);\n              firebaseChangeScore.child(\"score\").set(newScore);\n          }\n  \n          //disabling buttons\n          document.getElementById(\"quiz\").style.display = \"none\";\n          document.getElementById(\"afterAns\").style.display = \"inherit\";\n          let firebaseChangeCounter2 = firebase.database().ref(`players/${TN}`);\n          firebaseChangeCounter2.child('counter').set(2);\n      })\n  }\n\n  //Onload function to display current live question\n   liveQuestionSetter() {\n    this.props.firebaseRef.once(\"value\", function(snapshot) {\n      let liveQues = snapshot.val().liveQuestion;\n      this.setState({ liveQuestion: liveQues });\n      currentQuestion();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <BrandHeader\n          teamName={this.props.teamName}\n          participantName={this.props.participantName}\n        />\n        <div className=\"QuestionPage container\">\n          <div className=\"text-centre justify-content-center row\">\n            <p\n              className=\"questionNumber tag\"\n              style={{ justifyContent: \"center\" }}\n            >\n              Quesetion {this.state.liveQuestion} of 10\n            </p>\n          </div>\n          <br />\n          <p className=\"Question\">\n            {/* Lorem, ipsum dolor sit amet consectetur adipisicing elit. Dolores\n            optio sint repellendus quas, quos, omnis alias quidem, adipisicing\n            elit. Dolores optio sint repellendus quas, quos, omnis alias quidem */}\n            {this.state.question}\n          </p>\n          <br />\n          <div id=\"options\">\n          <button id=\"a\" onclick={this.check.bind(this)}>A</button>\n        <button id=\"b\" onclick={this.check.bind(this)}>B</button>\n        <button id=\"c\" onclick={this.check.bind(this)}>C</button>\n        <button id=\"d\" onclick={this.check.bind(this)}>D</button>\n          </div>\n          <br />\n          <div className=\"row\">\n            <div className=\"col-sm-5\" />\n            <div className=\"timer col-sm-4\">\n              <CircularProgressbar\n                className=\"timerCircle\"\n                percentage={this.state.percentage}\n                text={\n                  <tspan\n                    dx={needDominantBaselineFix ? -25 : 0}\n                    dy={needDominantBaselineFix ? +6 : 0}\n                  >\n                    {this.state.time}\n                  </tspan>\n                }\n                background=\"true\"\n                backgroundPadding={0}\n                strokeWidth={5}\n                styles={{\n                  // Customize the root svg element\n                  root: {},\n                  // Customize the path, i.e. the \"completed progress\"\n                  path: {\n                    // Path color\n                    stroke: `rgba(250, 0, 250, ${this.state.percentage / 100})`,\n                    // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n                    strokeLinecap: \"butt\",\n                    // Customize transition animation\n                    transition: \"stroke-dashoffset 0.5s ease 0s\"\n                  },\n                  // Customize the circle behind the path, i.e. the \"total progress\"\n                  trail: {\n                    // Trail color\n                    stroke: \"#d6d6d6\"\n                  },\n                  // Customize the text\n                  text: {\n                    // Text color\n                    fill: \"#34c\",\n                    // Text size\n                    fontSize: \"20px\"\n                  },\n                  // Customize background - only used when the `background` prop is true\n                  background: {\n                    fill: \"white\"\n                  }\n                }}\n              />\n            </div>\n\n            <div\n              className=\"continue tag col-sm-2 text-center\"\n              style={{ borderRadius: 25 }}\n            >\n              Continue\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuizConsole;\n"]},"metadata":{},"sourceType":"module"}